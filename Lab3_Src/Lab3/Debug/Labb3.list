
Labb3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002f98  08002f98  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f98  08002f98  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000038  08002fd8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002fd8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0d  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  00029c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001709a  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce3d  00000000  00000000  00043cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008247f  00000000  00000000  00050b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2f8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000d2fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f5c 	.word	0x08002f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002f5c 	.word	0x08002f5c

0800014c <checkflag>:


int button_pressed_counter[number_of_buttons] = {100, 100, 100};


int checkflag(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <checkflag+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <checkflag+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <checkflag+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <checkflag+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000054 	.word	0x20000054

08000180 <getKeyInput>:


void getKeyInput(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < number_of_buttons; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e06f      	b.n	800026c <getKeyInput+0xec>
		keyReg0[i] = keyReg1[i];
 800018c:	4a3b      	ldr	r2, [pc, #236]	; (800027c <getKeyInput+0xfc>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493a      	ldr	r1, [pc, #232]	; (8000280 <getKeyInput+0x100>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 800019c:	4a39      	ldr	r2, [pc, #228]	; (8000284 <getKeyInput+0x104>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4935      	ldr	r1, [pc, #212]	; (800027c <getKeyInput+0xfc>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg2[i] = HAL_GPIO_ReadPin(portB[i], buttons[i]);
 80001ac:	4a36      	ldr	r2, [pc, #216]	; (8000288 <getKeyInput+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4935      	ldr	r1, [pc, #212]	; (800028c <getKeyInput+0x10c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 fea0 	bl	8001f04 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a2e      	ldr	r2, [pc, #184]	; (8000284 <getKeyInput+0x104>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((keyReg0[i] == keyReg1[i])&&(keyReg1[i] == keyReg2[i])) {
 80001d0:	4a2b      	ldr	r2, [pc, #172]	; (8000280 <getKeyInput+0x100>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4928      	ldr	r1, [pc, #160]	; (800027c <getKeyInput+0xfc>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d140      	bne.n	8000266 <getKeyInput+0xe6>
 80001e4:	4a25      	ldr	r2, [pc, #148]	; (800027c <getKeyInput+0xfc>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4925      	ldr	r1, [pc, #148]	; (8000284 <getKeyInput+0x104>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d136      	bne.n	8000266 <getKeyInput+0xe6>
			if (keyReg3[i] != keyReg2[i]){
 80001f8:	4a25      	ldr	r2, [pc, #148]	; (8000290 <getKeyInput+0x110>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4920      	ldr	r1, [pc, #128]	; (8000284 <getKeyInput+0x104>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d018      	beq.n	800023e <getKeyInput+0xbe>
				keyReg3[i] = keyReg2[i];
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <getKeyInput+0x104>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	491e      	ldr	r1, [pc, #120]	; (8000290 <getKeyInput+0x110>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] <= pressed_button){
 800021c:	4a19      	ldr	r2, [pc, #100]	; (8000284 <getKeyInput+0x104>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dc1e      	bgt.n	8000266 <getKeyInput+0xe6>
					button_pressed_counter[i] = 100;
 8000228:	4a1a      	ldr	r2, [pc, #104]	; (8000294 <getKeyInput+0x114>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2164      	movs	r1, #100	; 0x64
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		            button_flag[i] = 1;
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <getKeyInput+0x118>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023c:	e013      	b.n	8000266 <getKeyInput+0xe6>
		        }
		    } else {
		    	 button_pressed_counter[i]--;
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	1e5a      	subs	r2, r3, #1
 8000248:	4912      	ldr	r1, [pc, #72]	; (8000294 <getKeyInput+0x114>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		         if (button_pressed_counter[i] <= 0){
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <getKeyInput+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dc04      	bgt.n	8000266 <getKeyInput+0xe6>
		        	 keyReg3[i] = normal_button;
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <getKeyInput+0x110>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < number_of_buttons; i++){
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3301      	adds	r3, #1
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b02      	cmp	r3, #2
 8000270:	dd8c      	ble.n	800018c <getKeyInput+0xc>
		         }
		    }
		}
	}
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	2000009c 	.word	0x2000009c
 8000280:	200000b4 	.word	0x200000b4
 8000284:	200000c0 	.word	0x200000c0
 8000288:	20000000 	.word	0x20000000
 800028c:	2000000c 	.word	0x2000000c
 8000290:	200000a8 	.word	0x200000a8
 8000294:	20000014 	.word	0x20000014
 8000298:	20000054 	.word	0x20000054

0800029c <checkManual>:
#include <fsm_automatic.h>

void checkManual(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	updateLedBuffer();
 80002a0:	f000 fbcc 	bl	8000a3c <updateLedBuffer>
	if (checkflag(0) == 1){
 80002a4:	2000      	movs	r0, #0
 80002a6:	f7ff ff51 	bl	800014c <checkflag>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d10e      	bne.n	80002ce <checkManual+0x32>
		initialduration = currentred;
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <checkManual+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <checkManual+0x3c>)
 80002b6:	6013      	str	r3, [r2, #0]
		traffic_turnoffall();
 80002b8:	f001 fa8a 	bl	80017d0 <traffic_turnoffall>
		status = MAN_RED;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <checkManual+0x40>)
 80002be:	2202      	movs	r2, #2
 80002c0:	601a      	str	r2, [r3, #0]
		setTimerRoad1(100);
 80002c2:	2064      	movs	r0, #100	; 0x64
 80002c4:	f001 f8aa 	bl	800141c <setTimerRoad1>
		setTimerRoad2(100);
 80002c8:	2064      	movs	r0, #100	; 0x64
 80002ca:	f001 f8c3 	bl	8001454 <setTimerRoad2>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000020 	.word	0x20000020
 80002d8:	2000006c 	.word	0x2000006c
 80002dc:	20000060 	.word	0x20000060

080002e0 <fsm_automatic_run>:
void fsm_automatic_run(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	switch (status) {
 80002e4:	4ba5      	ldr	r3, [pc, #660]	; (800057c <fsm_automatic_run+0x29c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b3c      	cmp	r3, #60	; 0x3c
 80002ea:	f000 80db 	beq.w	80004a4 <fsm_automatic_run+0x1c4>
 80002ee:	2b3c      	cmp	r3, #60	; 0x3c
 80002f0:	f300 8134 	bgt.w	800055c <fsm_automatic_run+0x27c>
 80002f4:	2b28      	cmp	r3, #40	; 0x28
 80002f6:	dc59      	bgt.n	80003ac <fsm_automatic_run+0xcc>
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	f340 812f 	ble.w	800055c <fsm_automatic_run+0x27c>
 80002fe:	3b01      	subs	r3, #1
 8000300:	2b27      	cmp	r3, #39	; 0x27
 8000302:	f200 812b 	bhi.w	800055c <fsm_automatic_run+0x27c>
 8000306:	a201      	add	r2, pc, #4	; (adr r2, 800030c <fsm_automatic_run+0x2c>)
 8000308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030c:	080003b5 	.word	0x080003b5
 8000310:	0800055d 	.word	0x0800055d
 8000314:	0800055d 	.word	0x0800055d
 8000318:	0800055d 	.word	0x0800055d
 800031c:	0800055d 	.word	0x0800055d
 8000320:	0800055d 	.word	0x0800055d
 8000324:	0800055d 	.word	0x0800055d
 8000328:	0800055d 	.word	0x0800055d
 800032c:	0800055d 	.word	0x0800055d
 8000330:	0800047b 	.word	0x0800047b
 8000334:	0800055d 	.word	0x0800055d
 8000338:	0800055d 	.word	0x0800055d
 800033c:	0800055d 	.word	0x0800055d
 8000340:	0800055d 	.word	0x0800055d
 8000344:	0800055d 	.word	0x0800055d
 8000348:	0800055d 	.word	0x0800055d
 800034c:	0800055d 	.word	0x0800055d
 8000350:	0800055d 	.word	0x0800055d
 8000354:	0800055d 	.word	0x0800055d
 8000358:	080003e9 	.word	0x080003e9
 800035c:	0800055d 	.word	0x0800055d
 8000360:	0800055d 	.word	0x0800055d
 8000364:	0800055d 	.word	0x0800055d
 8000368:	0800055d 	.word	0x0800055d
 800036c:	0800055d 	.word	0x0800055d
 8000370:	0800055d 	.word	0x0800055d
 8000374:	0800055d 	.word	0x0800055d
 8000378:	0800055d 	.word	0x0800055d
 800037c:	0800055d 	.word	0x0800055d
 8000380:	08000415 	.word	0x08000415
 8000384:	0800055d 	.word	0x0800055d
 8000388:	0800055d 	.word	0x0800055d
 800038c:	0800055d 	.word	0x0800055d
 8000390:	0800055d 	.word	0x0800055d
 8000394:	0800055d 	.word	0x0800055d
 8000398:	0800055d 	.word	0x0800055d
 800039c:	0800055d 	.word	0x0800055d
 80003a0:	0800055d 	.word	0x0800055d
 80003a4:	0800055d 	.word	0x0800055d
 80003a8:	08000533 	.word	0x08000533
 80003ac:	2b32      	cmp	r3, #50	; 0x32
 80003ae:	f000 808e 	beq.w	80004ce <fsm_automatic_run+0x1ee>
				road1duration = currentgreen;
				setTimerRoad1(currentgreen);
			}
			break;
		default:
			break;
 80003b2:	e0d3      	b.n	800055c <fsm_automatic_run+0x27c>
			traffic_turnoffall();
 80003b4:	f001 fa0c 	bl	80017d0 <traffic_turnoffall>
			status = AUTO_1RED_2GREEN;
 80003b8:	4b70      	ldr	r3, [pc, #448]	; (800057c <fsm_automatic_run+0x29c>)
 80003ba:	2214      	movs	r2, #20
 80003bc:	601a      	str	r2, [r3, #0]
			road1duration = currentred;
 80003be:	4b70      	ldr	r3, [pc, #448]	; (8000580 <fsm_automatic_run+0x2a0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a70      	ldr	r2, [pc, #448]	; (8000584 <fsm_automatic_run+0x2a4>)
 80003c4:	6013      	str	r3, [r2, #0]
			road2duration = currentgreen;
 80003c6:	4b70      	ldr	r3, [pc, #448]	; (8000588 <fsm_automatic_run+0x2a8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a70      	ldr	r2, [pc, #448]	; (800058c <fsm_automatic_run+0x2ac>)
 80003cc:	6013      	str	r3, [r2, #0]
			setTimerRoad1(currentred);
 80003ce:	4b6c      	ldr	r3, [pc, #432]	; (8000580 <fsm_automatic_run+0x2a0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f822 	bl	800141c <setTimerRoad1>
			setTimerRoad2(currentgreen);
 80003d8:	4b6b      	ldr	r3, [pc, #428]	; (8000588 <fsm_automatic_run+0x2a8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f839 	bl	8001454 <setTimerRoad2>
			setTimer2();
 80003e2:	f001 f853 	bl	800148c <setTimer2>
			break;
 80003e6:	e0c6      	b.n	8000576 <fsm_automatic_run+0x296>
			traffic_1red_2green();
 80003e8:	f001 f962 	bl	80016b0 <traffic_1red_2green>
			checkManual();
 80003ec:	f7ff ff56 	bl	800029c <checkManual>
			if (timerRoad2_flag == 1){
 80003f0:	4b67      	ldr	r3, [pc, #412]	; (8000590 <fsm_automatic_run+0x2b0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 80b3 	bne.w	8000560 <fsm_automatic_run+0x280>
				status = AUTO_1RED_2YELLOW;
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <fsm_automatic_run+0x29c>)
 80003fc:	221e      	movs	r2, #30
 80003fe:	601a      	str	r2, [r3, #0]
				road2duration = currentyellow;
 8000400:	4b64      	ldr	r3, [pc, #400]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a61      	ldr	r2, [pc, #388]	; (800058c <fsm_automatic_run+0x2ac>)
 8000406:	6013      	str	r3, [r2, #0]
				setTimerRoad2(currentyellow);
 8000408:	4b62      	ldr	r3, [pc, #392]	; (8000594 <fsm_automatic_run+0x2b4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f821 	bl	8001454 <setTimerRoad2>
			break;
 8000412:	e0a5      	b.n	8000560 <fsm_automatic_run+0x280>
			traffic_1red_2yellow();
 8000414:	f001 f970 	bl	80016f8 <traffic_1red_2yellow>
			checkManual();
 8000418:	f7ff ff40 	bl	800029c <checkManual>
			if ((timerRoad1_flag == 1) && (timerRoad2_flag == 1)){
 800041c:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <fsm_automatic_run+0x2b8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d118      	bne.n	8000456 <fsm_automatic_run+0x176>
 8000424:	4b5a      	ldr	r3, [pc, #360]	; (8000590 <fsm_automatic_run+0x2b0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d114      	bne.n	8000456 <fsm_automatic_run+0x176>
				status = AUTO_1GREEN_2RED;
 800042c:	4b53      	ldr	r3, [pc, #332]	; (800057c <fsm_automatic_run+0x29c>)
 800042e:	223c      	movs	r2, #60	; 0x3c
 8000430:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 8000432:	4b55      	ldr	r3, [pc, #340]	; (8000588 <fsm_automatic_run+0x2a8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a53      	ldr	r2, [pc, #332]	; (8000584 <fsm_automatic_run+0x2a4>)
 8000438:	6013      	str	r3, [r2, #0]
				road2duration = currentred;
 800043a:	4b51      	ldr	r3, [pc, #324]	; (8000580 <fsm_automatic_run+0x2a0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a53      	ldr	r2, [pc, #332]	; (800058c <fsm_automatic_run+0x2ac>)
 8000440:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 8000442:	4b51      	ldr	r3, [pc, #324]	; (8000588 <fsm_automatic_run+0x2a8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 ffe8 	bl	800141c <setTimerRoad1>
				setTimerRoad2(currentred);
 800044c:	4b4c      	ldr	r3, [pc, #304]	; (8000580 <fsm_automatic_run+0x2a0>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4618      	mov	r0, r3
 8000452:	f000 ffff 	bl	8001454 <setTimerRoad2>
			if (timerRoad2_flag == 1){
 8000456:	4b4e      	ldr	r3, [pc, #312]	; (8000590 <fsm_automatic_run+0x2b0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	f040 8082 	bne.w	8000564 <fsm_automatic_run+0x284>
				status = AUTO_1RED_2RED;
 8000460:	4b46      	ldr	r3, [pc, #280]	; (800057c <fsm_automatic_run+0x29c>)
 8000462:	220a      	movs	r2, #10
 8000464:	601a      	str	r2, [r3, #0]
				road2duration = currentred;
 8000466:	4b46      	ldr	r3, [pc, #280]	; (8000580 <fsm_automatic_run+0x2a0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a48      	ldr	r2, [pc, #288]	; (800058c <fsm_automatic_run+0x2ac>)
 800046c:	6013      	str	r3, [r2, #0]
				setTimerRoad2(currentred);
 800046e:	4b44      	ldr	r3, [pc, #272]	; (8000580 <fsm_automatic_run+0x2a0>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 ffee 	bl	8001454 <setTimerRoad2>
			break;
 8000478:	e074      	b.n	8000564 <fsm_automatic_run+0x284>
			traffic_1red_2red();
 800047a:	f001 f8f5 	bl	8001668 <traffic_1red_2red>
			checkManual();
 800047e:	f7ff ff0d 	bl	800029c <checkManual>
			if (timerRoad1_flag == 1){
 8000482:	4b45      	ldr	r3, [pc, #276]	; (8000598 <fsm_automatic_run+0x2b8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d16e      	bne.n	8000568 <fsm_automatic_run+0x288>
				status = AUTO_1GREEN_2RED;
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <fsm_automatic_run+0x29c>)
 800048c:	223c      	movs	r2, #60	; 0x3c
 800048e:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 8000490:	4b3d      	ldr	r3, [pc, #244]	; (8000588 <fsm_automatic_run+0x2a8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a3b      	ldr	r2, [pc, #236]	; (8000584 <fsm_automatic_run+0x2a4>)
 8000496:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 8000498:	4b3b      	ldr	r3, [pc, #236]	; (8000588 <fsm_automatic_run+0x2a8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4618      	mov	r0, r3
 800049e:	f000 ffbd 	bl	800141c <setTimerRoad1>
			break;
 80004a2:	e061      	b.n	8000568 <fsm_automatic_run+0x288>
			traffic_1green_2red();
 80004a4:	f001 f94c 	bl	8001740 <traffic_1green_2red>
			checkManual();
 80004a8:	f7ff fef8 	bl	800029c <checkManual>
			if (timerRoad1_flag == 1){
 80004ac:	4b3a      	ldr	r3, [pc, #232]	; (8000598 <fsm_automatic_run+0x2b8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d15b      	bne.n	800056c <fsm_automatic_run+0x28c>
				status = AUTO_1YELLOW_2RED;
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <fsm_automatic_run+0x29c>)
 80004b6:	2232      	movs	r2, #50	; 0x32
 80004b8:	601a      	str	r2, [r3, #0]
				road1duration = currentyellow;
 80004ba:	4b36      	ldr	r3, [pc, #216]	; (8000594 <fsm_automatic_run+0x2b4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a31      	ldr	r2, [pc, #196]	; (8000584 <fsm_automatic_run+0x2a4>)
 80004c0:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentyellow);
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <fsm_automatic_run+0x2b4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 ffa8 	bl	800141c <setTimerRoad1>
			break;
 80004cc:	e04e      	b.n	800056c <fsm_automatic_run+0x28c>
			traffic_1yellow_2red();
 80004ce:	f001 f95b 	bl	8001788 <traffic_1yellow_2red>
			checkManual();
 80004d2:	f7ff fee3 	bl	800029c <checkManual>
			if((timerRoad1_flag == 1) && (timerRoad2_flag == 1)){
 80004d6:	4b30      	ldr	r3, [pc, #192]	; (8000598 <fsm_automatic_run+0x2b8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d118      	bne.n	8000510 <fsm_automatic_run+0x230>
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <fsm_automatic_run+0x2b0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d114      	bne.n	8000510 <fsm_automatic_run+0x230>
				status = AUTO_1RED_2GREEN;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <fsm_automatic_run+0x29c>)
 80004e8:	2214      	movs	r2, #20
 80004ea:	601a      	str	r2, [r3, #0]
				road1duration = currentred;
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <fsm_automatic_run+0x2a0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a24      	ldr	r2, [pc, #144]	; (8000584 <fsm_automatic_run+0x2a4>)
 80004f2:	6013      	str	r3, [r2, #0]
				road2duration = currentgreen;
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <fsm_automatic_run+0x2a8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a24      	ldr	r2, [pc, #144]	; (800058c <fsm_automatic_run+0x2ac>)
 80004fa:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentred);
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <fsm_automatic_run+0x2a0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f000 ff8b 	bl	800141c <setTimerRoad1>
				setTimerRoad2(currentgreen);
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <fsm_automatic_run+0x2a8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 ffa2 	bl	8001454 <setTimerRoad2>
			if (timerRoad1_flag == 1){
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <fsm_automatic_run+0x2b8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d12b      	bne.n	8000570 <fsm_automatic_run+0x290>
				status = AUTO_1RED_2RED1;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <fsm_automatic_run+0x29c>)
 800051a:	2228      	movs	r2, #40	; 0x28
 800051c:	601a      	str	r2, [r3, #0]
				road1duration = currentred;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <fsm_automatic_run+0x2a0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <fsm_automatic_run+0x2a4>)
 8000524:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentred);
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <fsm_automatic_run+0x2a0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 ff76 	bl	800141c <setTimerRoad1>
			break;
 8000530:	e01e      	b.n	8000570 <fsm_automatic_run+0x290>
			traffic_1red_2red();
 8000532:	f001 f899 	bl	8001668 <traffic_1red_2red>
			checkManual();
 8000536:	f7ff feb1 	bl	800029c <checkManual>
			if (timerRoad2_flag == 1){
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <fsm_automatic_run+0x2b0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d118      	bne.n	8000574 <fsm_automatic_run+0x294>
				status = AUTO_1GREEN_2RED;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <fsm_automatic_run+0x29c>)
 8000544:	223c      	movs	r2, #60	; 0x3c
 8000546:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <fsm_automatic_run+0x2a8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <fsm_automatic_run+0x2a4>)
 800054e:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <fsm_automatic_run+0x2a8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 ff61 	bl	800141c <setTimerRoad1>
			break;
 800055a:	e00b      	b.n	8000574 <fsm_automatic_run+0x294>
			break;
 800055c:	bf00      	nop
 800055e:	e00a      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 8000560:	bf00      	nop
 8000562:	e008      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 8000564:	bf00      	nop
 8000566:	e006      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 8000568:	bf00      	nop
 800056a:	e004      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 800056c:	bf00      	nop
 800056e:	e002      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <fsm_automatic_run+0x296>
			break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000060 	.word	0x20000060
 8000580:	20000020 	.word	0x20000020
 8000584:	20000064 	.word	0x20000064
 8000588:	20000024 	.word	0x20000024
 800058c:	20000068 	.word	0x20000068
 8000590:	20000094 	.word	0x20000094
 8000594:	20000028 	.word	0x20000028
 8000598:	20000090 	.word	0x20000090

0800059c <fsm_manual_run>:
 *  Created on: Oct 27, 2024
 *      Author: ASUS
 */
#include <fsm_manual.h>

void fsm_manual_run(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	switch (status) {
 80005a0:	4b92      	ldr	r3, [pc, #584]	; (80007ec <fsm_manual_run+0x250>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	f000 80b8 	beq.w	800071a <fsm_manual_run+0x17e>
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	f300 8114 	bgt.w	80007d8 <fsm_manual_run+0x23c>
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d002      	beq.n	80005ba <fsm_manual_run+0x1e>
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d050      	beq.n	800065a <fsm_manual_run+0xbe>
			if (checkflag(2) == 1){
				status = INIT;
			}
			break;
		default:
			break;
 80005b8:	e10e      	b.n	80007d8 <fsm_manual_run+0x23c>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 80005ba:	4b8d      	ldr	r3, [pc, #564]	; (80007f0 <fsm_manual_run+0x254>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	bf0c      	ite	eq
 80005c2:	2301      	moveq	r3, #1
 80005c4:	2300      	movne	r3, #0
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b8a      	ldr	r3, [pc, #552]	; (80007f4 <fsm_manual_run+0x258>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	bf0c      	ite	eq
 80005d0:	2301      	moveq	r3, #1
 80005d2:	2300      	movne	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4013      	ands	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00b      	beq.n	80005f6 <fsm_manual_run+0x5a>
				traffic_manualred();
 80005de:	f001 f91b 	bl	8001818 <traffic_manualred>
				updateManualRedLedBuffer();
 80005e2:	f000 fa9d 	bl	8000b20 <updateManualRedLedBuffer>
				setTimerRoad1(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 ff17 	bl	800141c <setTimerRoad1>
				setTimerRoad2(500);
 80005ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f2:	f000 ff2f 	bl	8001454 <setTimerRoad2>
			if (checkflag(0) == 1){
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fda8 	bl	800014c <checkflag>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d10a      	bne.n	8000618 <fsm_manual_run+0x7c>
				status = MAN_YELLOW;
 8000602:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <fsm_manual_run+0x250>)
 8000604:	2203      	movs	r2, #3
 8000606:	601a      	str	r2, [r3, #0]
				currentred = initialduration;
 8000608:	4b7b      	ldr	r3, [pc, #492]	; (80007f8 <fsm_manual_run+0x25c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a7b      	ldr	r2, [pc, #492]	; (80007fc <fsm_manual_run+0x260>)
 800060e:	6013      	str	r3, [r2, #0]
				initialduration = currentyellow;
 8000610:	4b7b      	ldr	r3, [pc, #492]	; (8000800 <fsm_manual_run+0x264>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a78      	ldr	r2, [pc, #480]	; (80007f8 <fsm_manual_run+0x25c>)
 8000616:	6013      	str	r3, [r2, #0]
			if (checkflag(1) == 1){
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff fd97 	bl	800014c <checkflag>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10f      	bne.n	8000644 <fsm_manual_run+0xa8>
				if(currentred <= 99000){
 8000624:	4b75      	ldr	r3, [pc, #468]	; (80007fc <fsm_manual_run+0x260>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a76      	ldr	r2, [pc, #472]	; (8000804 <fsm_manual_run+0x268>)
 800062a:	4293      	cmp	r3, r2
 800062c:	dc06      	bgt.n	800063c <fsm_manual_run+0xa0>
					currentred += 1000;
 800062e:	4b73      	ldr	r3, [pc, #460]	; (80007fc <fsm_manual_run+0x260>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000636:	4a71      	ldr	r2, [pc, #452]	; (80007fc <fsm_manual_run+0x260>)
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	e003      	b.n	8000644 <fsm_manual_run+0xa8>
					currentred = 1000;
 800063c:	4b6f      	ldr	r3, [pc, #444]	; (80007fc <fsm_manual_run+0x260>)
 800063e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000642:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 8000644:	2002      	movs	r0, #2
 8000646:	f7ff fd81 	bl	800014c <checkflag>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	f040 80c5 	bne.w	80007dc <fsm_manual_run+0x240>
				status = INIT;
 8000652:	4b66      	ldr	r3, [pc, #408]	; (80007ec <fsm_manual_run+0x250>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
			break;
 8000658:	e0c0      	b.n	80007dc <fsm_manual_run+0x240>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 800065a:	4b65      	ldr	r3, [pc, #404]	; (80007f0 <fsm_manual_run+0x254>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	bf0c      	ite	eq
 8000662:	2301      	moveq	r3, #1
 8000664:	2300      	movne	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b62      	ldr	r3, [pc, #392]	; (80007f4 <fsm_manual_run+0x258>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	bf0c      	ite	eq
 8000670:	2301      	moveq	r3, #1
 8000672:	2300      	movne	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00b      	beq.n	8000696 <fsm_manual_run+0xfa>
				traffic_manualyellow();
 800067e:	f001 f90f 	bl	80018a0 <traffic_manualyellow>
				updateManualYellowLedBuffer();
 8000682:	f000 fab9 	bl	8000bf8 <updateManualYellowLedBuffer>
				setTimerRoad1(500);
 8000686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068a:	f000 fec7 	bl	800141c <setTimerRoad1>
				setTimerRoad2(500);
 800068e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000692:	f000 fedf 	bl	8001454 <setTimerRoad2>
			if (checkflag(0) == 1){
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff fd58 	bl	800014c <checkflag>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10a      	bne.n	80006b8 <fsm_manual_run+0x11c>
				status = MAN_GREEN;
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <fsm_manual_run+0x250>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	601a      	str	r2, [r3, #0]
				currentyellow = initialduration;
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <fsm_manual_run+0x25c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a54      	ldr	r2, [pc, #336]	; (8000800 <fsm_manual_run+0x264>)
 80006ae:	6013      	str	r3, [r2, #0]
				initialduration = currentgreen;
 80006b0:	4b55      	ldr	r3, [pc, #340]	; (8000808 <fsm_manual_run+0x26c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a50      	ldr	r2, [pc, #320]	; (80007f8 <fsm_manual_run+0x25c>)
 80006b6:	6013      	str	r3, [r2, #0]
			if (checkflag(1) == 1){
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fd47 	bl	800014c <checkflag>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d120      	bne.n	8000706 <fsm_manual_run+0x16a>
				if(currentyellow <= 99000 ){
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <fsm_manual_run+0x264>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a4e      	ldr	r2, [pc, #312]	; (8000804 <fsm_manual_run+0x268>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	dc17      	bgt.n	80006fe <fsm_manual_run+0x162>
					if (currentred > currentyellow + currentgreen){
 80006ce:	4b4c      	ldr	r3, [pc, #304]	; (8000800 <fsm_manual_run+0x264>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <fsm_manual_run+0x26c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	441a      	add	r2, r3
 80006d8:	4b48      	ldr	r3, [pc, #288]	; (80007fc <fsm_manual_run+0x260>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	da06      	bge.n	80006ee <fsm_manual_run+0x152>
						currentyellow += 1000;
 80006e0:	4b47      	ldr	r3, [pc, #284]	; (8000800 <fsm_manual_run+0x264>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006e8:	4a45      	ldr	r2, [pc, #276]	; (8000800 <fsm_manual_run+0x264>)
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	e00b      	b.n	8000706 <fsm_manual_run+0x16a>
						currentyellow = currentred - currentgreen;
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <fsm_manual_run+0x260>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b45      	ldr	r3, [pc, #276]	; (8000808 <fsm_manual_run+0x26c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	4a41      	ldr	r2, [pc, #260]	; (8000800 <fsm_manual_run+0x264>)
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e003      	b.n	8000706 <fsm_manual_run+0x16a>
					currentyellow = 1000;
 80006fe:	4b40      	ldr	r3, [pc, #256]	; (8000800 <fsm_manual_run+0x264>)
 8000700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000704:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 8000706:	2002      	movs	r0, #2
 8000708:	f7ff fd20 	bl	800014c <checkflag>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d166      	bne.n	80007e0 <fsm_manual_run+0x244>
				status = INIT;
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <fsm_manual_run+0x250>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
			break;
 8000718:	e062      	b.n	80007e0 <fsm_manual_run+0x244>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <fsm_manual_run+0x254>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <fsm_manual_run+0x258>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4013      	ands	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00b      	beq.n	8000756 <fsm_manual_run+0x1ba>
				traffic_manualgreen();
 800073e:	f001 f88d 	bl	800185c <traffic_manualgreen>
				updateManualGreenLedBuffer();
 8000742:	f000 fac5 	bl	8000cd0 <updateManualGreenLedBuffer>
				setTimerRoad1(500);
 8000746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074a:	f000 fe67 	bl	800141c <setTimerRoad1>
				setTimerRoad2(500);
 800074e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000752:	f000 fe7f 	bl	8001454 <setTimerRoad2>
			if (checkflag(0) == 1){
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fcf8 	bl	800014c <checkflag>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d109      	bne.n	8000776 <fsm_manual_run+0x1da>
				status = INIT;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <fsm_manual_run+0x250>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
				currentgreen = initialduration;
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <fsm_manual_run+0x25c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <fsm_manual_run+0x26c>)
 800076e:	6013      	str	r3, [r2, #0]
				initialduration = 0;
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <fsm_manual_run+0x25c>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
			if (checkflag(1) == 1){
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fce8 	bl	800014c <checkflag>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d120      	bne.n	80007c4 <fsm_manual_run+0x228>
				if (currentgreen <= 99000){
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <fsm_manual_run+0x26c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <fsm_manual_run+0x268>)
 8000788:	4293      	cmp	r3, r2
 800078a:	dc17      	bgt.n	80007bc <fsm_manual_run+0x220>
					if (currentred > (currentgreen + currentyellow)){
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <fsm_manual_run+0x26c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <fsm_manual_run+0x264>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	441a      	add	r2, r3
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <fsm_manual_run+0x260>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	da06      	bge.n	80007ac <fsm_manual_run+0x210>
						currentgreen += 1000;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <fsm_manual_run+0x26c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <fsm_manual_run+0x26c>)
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e00b      	b.n	80007c4 <fsm_manual_run+0x228>
						currentgreen = currentred - currentyellow;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <fsm_manual_run+0x260>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <fsm_manual_run+0x264>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <fsm_manual_run+0x26c>)
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	e003      	b.n	80007c4 <fsm_manual_run+0x228>
					currentgreen = 1000;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <fsm_manual_run+0x26c>)
 80007be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c2:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff fcc1 	bl	800014c <checkflag>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d109      	bne.n	80007e4 <fsm_manual_run+0x248>
				status = INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <fsm_manual_run+0x250>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
			break;
 80007d6:	e005      	b.n	80007e4 <fsm_manual_run+0x248>
			break;
 80007d8:	bf00      	nop
 80007da:	e004      	b.n	80007e6 <fsm_manual_run+0x24a>
			break;
 80007dc:	bf00      	nop
 80007de:	e002      	b.n	80007e6 <fsm_manual_run+0x24a>
			break;
 80007e0:	bf00      	nop
 80007e2:	e000      	b.n	80007e6 <fsm_manual_run+0x24a>
			break;
 80007e4:	bf00      	nop
	}
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000060 	.word	0x20000060
 80007f0:	20000090 	.word	0x20000090
 80007f4:	20000094 	.word	0x20000094
 80007f8:	2000006c 	.word	0x2000006c
 80007fc:	20000020 	.word	0x20000020
 8000800:	20000028 	.word	0x20000028
 8000804:	000182b8 	.word	0x000182b8
 8000808:	20000024 	.word	0x20000024

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f001 f88e 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f814 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 f89a 	bl	8000950 <MX_GPIO_Init>
  MX_TIM2_Init();
 800081c:	f000 f84c 	bl	80008b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <main+0x2c>)
 8000822:	f001 ffe3 	bl	80027ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <main+0x30>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 800082c:	f7ff fd58 	bl	80002e0 <fsm_automatic_run>
	  fsm_manual_run();
 8000830:	f7ff feb4 	bl	800059c <fsm_manual_run>
	  fsm_automatic_run();
 8000834:	e7fa      	b.n	800082c <main+0x20>
 8000836:	bf00      	nop
 8000838:	200000cc 	.word	0x200000cc
 800083c:	20000060 	.word	0x20000060

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b090      	sub	sp, #64	; 0x40
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fb7c 	bl	8002f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fb8c 	bl	8001f94 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000882:	f000 f8d5 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fdf8 	bl	8002494 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008aa:	f000 f8c1 	bl	8000a30 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3740      	adds	r7, #64	; 0x40
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM2_Init+0x94>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM2_Init+0x94>)
 80008de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM2_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM2_Init+0x94>)
 80008ec:	2209      	movs	r2, #9
 80008ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM2_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM2_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_TIM2_Init+0x94>)
 80008fe:	f001 ff25 	bl	800274c <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000908:	f000 f892 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM2_Init+0x94>)
 800091a:	f002 f8a3 	bl	8002a64 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f884 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM2_Init+0x94>)
 8000936:	f002 fa7b 	bl	8002e30 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f876 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000cc 	.word	0x200000cc

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xbc>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_GPIO_Init+0xbc>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000994:	2200      	movs	r2, #0
 8000996:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <MX_GPIO_Init+0xc0>)
 800099c:	f001 fac9 	bl	8001f32 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009a0:	2200      	movs	r2, #0
 80009a2:	f641 617f 	movw	r1, #7807	; 0x1e7f
 80009a6:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0xc4>)
 80009a8:	f001 fac3 	bl	8001f32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009ac:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 80009b0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <MX_GPIO_Init+0xc0>)
 80009c6:	f001 f923 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB3 PB4
                           PB5 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009ca:	f641 637f 	movw	r3, #7807	; 0x1e7f
 80009ce:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2302      	movs	r3, #2
 80009da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0xc4>)
 80009e4:	f001 f914 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_GPIO_Init+0xc4>)
 80009fe:	f001 f907 	bl	8001c10 <HAL_GPIO_Init>

}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8000a20:	f7ff fbae 	bl	8000180 <getKeyInput>
	timerRun();
 8000a24:	f000 fd42 	bl	80014ac <timerRun>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <updateLedBuffer>:
int led_bufferRoad1 [2] = {0, 0};
int led_bufferRoad2 [2] = {0, 0};



void updateLedBuffer(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000a40:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <updateLedBuffer+0xc0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d156      	bne.n	8000af6 <updateLedBuffer+0xba>
	led_bufferRoad1[0] = (road1duration / 1000) / 10;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <updateLedBuffer+0xc4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <updateLedBuffer+0xc8>)
 8000a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a52:	1312      	asrs	r2, r2, #12
 8000a54:	17db      	asrs	r3, r3, #31
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	4a2b      	ldr	r2, [pc, #172]	; (8000b08 <updateLedBuffer+0xcc>)
 8000a5a:	6013      	str	r3, [r2, #0]
	led_bufferRoad1[1] = (road1duration / 1000) % 10;
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <updateLedBuffer+0xc4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <updateLedBuffer+0xd0>)
 8000a62:	fb82 1203 	smull	r1, r2, r2, r3
 8000a66:	1192      	asrs	r2, r2, #6
 8000a68:	17db      	asrs	r3, r3, #31
 8000a6a:	1ad1      	subs	r1, r2, r3
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <updateLedBuffer+0xd4>)
 8000a6e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a72:	109a      	asrs	r2, r3, #2
 8000a74:	17cb      	asrs	r3, r1, #31
 8000a76:	1ad2      	subs	r2, r2, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <updateLedBuffer+0xcc>)
 8000a84:	605a      	str	r2, [r3, #4]
	led_bufferRoad2[0] = (road2duration / 1000) / 10;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <updateLedBuffer+0xd8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <updateLedBuffer+0xc8>)
 8000a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a90:	1312      	asrs	r2, r2, #12
 8000a92:	17db      	asrs	r3, r3, #31
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <updateLedBuffer+0xdc>)
 8000a98:	6013      	str	r3, [r2, #0]
	led_bufferRoad2[1] = (road2duration / 1000) % 10;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <updateLedBuffer+0xd8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <updateLedBuffer+0xd0>)
 8000aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa4:	1192      	asrs	r2, r2, #6
 8000aa6:	17db      	asrs	r3, r3, #31
 8000aa8:	1ad1      	subs	r1, r2, r3
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <updateLedBuffer+0xd4>)
 8000aac:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab0:	109a      	asrs	r2, r3, #2
 8000ab2:	17cb      	asrs	r3, r1, #31
 8000ab4:	1ad2      	subs	r2, r2, r3
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	1aca      	subs	r2, r1, r3
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <updateLedBuffer+0xdc>)
 8000ac2:	605a      	str	r2, [r3, #4]


	update7SEGRoad1(index_led);
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <updateLedBuffer+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f96d 	bl	8000da8 <update7SEGRoad1>
	update7SEGRoad2(index_led);
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <updateLedBuffer+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f9a0 	bl	8000e18 <update7SEGRoad2>
	index_led++;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <updateLedBuffer+0xe0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <updateLedBuffer+0xe0>)
 8000ae0:	6013      	str	r3, [r2, #0]
	if (index_led >= MAX_LED) index_led = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <updateLedBuffer+0xe0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	db02      	blt.n	8000af2 <updateLedBuffer+0xb6>
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <updateLedBuffer+0xe0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
	setTimer2();
 8000af2:	f000 fccb 	bl	800148c <setTimer2>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000098 	.word	0x20000098
 8000b00:	20000064 	.word	0x20000064
 8000b04:	68db8bad 	.word	0x68db8bad
 8000b08:	20000074 	.word	0x20000074
 8000b0c:	10624dd3 	.word	0x10624dd3
 8000b10:	66666667 	.word	0x66666667
 8000b14:	20000068 	.word	0x20000068
 8000b18:	2000007c 	.word	0x2000007c
 8000b1c:	20000070 	.word	0x20000070

08000b20 <updateManualRedLedBuffer>:
void updateManualRedLedBuffer(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <updateManualRedLedBuffer+0xb4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d150      	bne.n	8000bce <updateManualRedLedBuffer+0xae>
	led_bufferRoad1[0] = status / 10;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <updateManualRedLedBuffer+0xb8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <updateManualRedLedBuffer+0xbc>)
 8000b32:	fb82 1203 	smull	r1, r2, r2, r3
 8000b36:	1092      	asrs	r2, r2, #2
 8000b38:	17db      	asrs	r3, r3, #31
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <updateManualRedLedBuffer+0xc0>)
 8000b3e:	6013      	str	r3, [r2, #0]
	led_bufferRoad1[1] = status % 10;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <updateManualRedLedBuffer+0xb8>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <updateManualRedLedBuffer+0xbc>)
 8000b46:	fb83 2301 	smull	r2, r3, r3, r1
 8000b4a:	109a      	asrs	r2, r3, #2
 8000b4c:	17cb      	asrs	r3, r1, #31
 8000b4e:	1ad2      	subs	r2, r2, r3
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	1aca      	subs	r2, r1, r3
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <updateManualRedLedBuffer+0xc0>)
 8000b5c:	605a      	str	r2, [r3, #4]
	led_bufferRoad2[0] = (currentred / 1000) / 10;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <updateManualRedLedBuffer+0xc4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <updateManualRedLedBuffer+0xc8>)
 8000b64:	fb82 1203 	smull	r1, r2, r2, r3
 8000b68:	1312      	asrs	r2, r2, #12
 8000b6a:	17db      	asrs	r3, r3, #31
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <updateManualRedLedBuffer+0xcc>)
 8000b70:	6013      	str	r3, [r2, #0]
	led_bufferRoad2[1] = (currentred / 1000) % 10;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <updateManualRedLedBuffer+0xc4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <updateManualRedLedBuffer+0xd0>)
 8000b78:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7c:	1192      	asrs	r2, r2, #6
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad1      	subs	r1, r2, r3
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <updateManualRedLedBuffer+0xbc>)
 8000b84:	fb83 2301 	smull	r2, r3, r3, r1
 8000b88:	109a      	asrs	r2, r3, #2
 8000b8a:	17cb      	asrs	r3, r1, #31
 8000b8c:	1ad2      	subs	r2, r2, r3
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	1aca      	subs	r2, r1, r3
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <updateManualRedLedBuffer+0xcc>)
 8000b9a:	605a      	str	r2, [r3, #4]

	update7SEGRoad1(index_led);
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f901 	bl	8000da8 <update7SEGRoad1>
	update7SEGRoad2(index_led);
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f934 	bl	8000e18 <update7SEGRoad2>
	index_led++;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000bb8:	6013      	str	r3, [r2, #0]
	if (index_led >= MAX_LED) index_led = 0;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	db02      	blt.n	8000bca <updateManualRedLedBuffer+0xaa>
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <updateManualRedLedBuffer+0xd4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
	setTimer2();
 8000bca:	f000 fc5f 	bl	800148c <setTimer2>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000098 	.word	0x20000098
 8000bd8:	20000060 	.word	0x20000060
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	20000074 	.word	0x20000074
 8000be4:	20000020 	.word	0x20000020
 8000be8:	68db8bad 	.word	0x68db8bad
 8000bec:	2000007c 	.word	0x2000007c
 8000bf0:	10624dd3 	.word	0x10624dd3
 8000bf4:	20000070 	.word	0x20000070

08000bf8 <updateManualYellowLedBuffer>:
void updateManualYellowLedBuffer(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <updateManualYellowLedBuffer+0xb4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d150      	bne.n	8000ca6 <updateManualYellowLedBuffer+0xae>
	led_bufferRoad1[0] = status / 10;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <updateManualYellowLedBuffer+0xb8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <updateManualYellowLedBuffer+0xbc>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1092      	asrs	r2, r2, #2
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <updateManualYellowLedBuffer+0xc0>)
 8000c16:	6013      	str	r3, [r2, #0]
	led_bufferRoad1[1] = status % 10;
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <updateManualYellowLedBuffer+0xb8>)
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <updateManualYellowLedBuffer+0xbc>)
 8000c1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c22:	109a      	asrs	r2, r3, #2
 8000c24:	17cb      	asrs	r3, r1, #31
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1aca      	subs	r2, r1, r3
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <updateManualYellowLedBuffer+0xc0>)
 8000c34:	605a      	str	r2, [r3, #4]
	led_bufferRoad2[0] = (currentyellow / 1000) / 10;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <updateManualYellowLedBuffer+0xc4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <updateManualYellowLedBuffer+0xc8>)
 8000c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c40:	1312      	asrs	r2, r2, #12
 8000c42:	17db      	asrs	r3, r3, #31
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <updateManualYellowLedBuffer+0xcc>)
 8000c48:	6013      	str	r3, [r2, #0]
	led_bufferRoad2[1] = (currentyellow / 1000) % 10;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <updateManualYellowLedBuffer+0xc4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <updateManualYellowLedBuffer+0xd0>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	1192      	asrs	r2, r2, #6
 8000c56:	17db      	asrs	r3, r3, #31
 8000c58:	1ad1      	subs	r1, r2, r3
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <updateManualYellowLedBuffer+0xbc>)
 8000c5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c60:	109a      	asrs	r2, r3, #2
 8000c62:	17cb      	asrs	r3, r1, #31
 8000c64:	1ad2      	subs	r2, r2, r3
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	1aca      	subs	r2, r1, r3
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <updateManualYellowLedBuffer+0xcc>)
 8000c72:	605a      	str	r2, [r3, #4]

	update7SEGRoad1(index_led);
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f895 	bl	8000da8 <update7SEGRoad1>
	update7SEGRoad2(index_led);
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8c8 	bl	8000e18 <update7SEGRoad2>
	index_led++;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c90:	6013      	str	r3, [r2, #0]
	if (index_led >= MAX_LED) index_led = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2202      	movs	r2, #2
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	db02      	blt.n	8000ca2 <updateManualYellowLedBuffer+0xaa>
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <updateManualYellowLedBuffer+0xd4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	setTimer2();
 8000ca2:	f000 fbf3 	bl	800148c <setTimer2>
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	20000060 	.word	0x20000060
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	20000074 	.word	0x20000074
 8000cbc:	20000028 	.word	0x20000028
 8000cc0:	68db8bad 	.word	0x68db8bad
 8000cc4:	2000007c 	.word	0x2000007c
 8000cc8:	10624dd3 	.word	0x10624dd3
 8000ccc:	20000070 	.word	0x20000070

08000cd0 <updateManualGreenLedBuffer>:
void updateManualGreenLedBuffer(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <updateManualGreenLedBuffer+0xb4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d150      	bne.n	8000d7e <updateManualGreenLedBuffer+0xae>
	led_bufferRoad1[0] = status / 10;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <updateManualGreenLedBuffer+0xb8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <updateManualGreenLedBuffer+0xbc>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1092      	asrs	r2, r2, #2
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <updateManualGreenLedBuffer+0xc0>)
 8000cee:	6013      	str	r3, [r2, #0]
	led_bufferRoad1[1] = status % 10;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <updateManualGreenLedBuffer+0xb8>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <updateManualGreenLedBuffer+0xbc>)
 8000cf6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfa:	109a      	asrs	r2, r3, #2
 8000cfc:	17cb      	asrs	r3, r1, #31
 8000cfe:	1ad2      	subs	r2, r2, r3
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	1aca      	subs	r2, r1, r3
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <updateManualGreenLedBuffer+0xc0>)
 8000d0c:	605a      	str	r2, [r3, #4]
	led_bufferRoad2[0] = (currentgreen / 1000) / 10;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <updateManualGreenLedBuffer+0xc4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <updateManualGreenLedBuffer+0xc8>)
 8000d14:	fb82 1203 	smull	r1, r2, r2, r3
 8000d18:	1312      	asrs	r2, r2, #12
 8000d1a:	17db      	asrs	r3, r3, #31
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <updateManualGreenLedBuffer+0xcc>)
 8000d20:	6013      	str	r3, [r2, #0]
	led_bufferRoad2[1] = (currentgreen / 1000) % 10;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <updateManualGreenLedBuffer+0xc4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <updateManualGreenLedBuffer+0xd0>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1192      	asrs	r2, r2, #6
 8000d2e:	17db      	asrs	r3, r3, #31
 8000d30:	1ad1      	subs	r1, r2, r3
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <updateManualGreenLedBuffer+0xbc>)
 8000d34:	fb83 2301 	smull	r2, r3, r3, r1
 8000d38:	109a      	asrs	r2, r3, #2
 8000d3a:	17cb      	asrs	r3, r1, #31
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	1aca      	subs	r2, r1, r3
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <updateManualGreenLedBuffer+0xcc>)
 8000d4a:	605a      	str	r2, [r3, #4]

	update7SEGRoad1(index_led);
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f829 	bl	8000da8 <update7SEGRoad1>
	update7SEGRoad2(index_led);
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f85c 	bl	8000e18 <update7SEGRoad2>
	index_led++;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d68:	6013      	str	r3, [r2, #0]
	if (index_led >= MAX_LED) index_led = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4293      	cmp	r3, r2
 8000d72:	db02      	blt.n	8000d7a <updateManualGreenLedBuffer+0xaa>
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <updateManualGreenLedBuffer+0xd4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
	setTimer2();
 8000d7a:	f000 fb87 	bl	800148c <setTimer2>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000098 	.word	0x20000098
 8000d88:	20000060 	.word	0x20000060
 8000d8c:	66666667 	.word	0x66666667
 8000d90:	20000074 	.word	0x20000074
 8000d94:	20000024 	.word	0x20000024
 8000d98:	68db8bad 	.word	0x68db8bad
 8000d9c:	2000007c 	.word	0x2000007c
 8000da0:	10624dd3 	.word	0x10624dd3
 8000da4:	20000070 	.word	0x20000070

08000da8 <update7SEGRoad1>:
void update7SEGRoad1 (int index){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	switch(index){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <update7SEGRoad1+0x16>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d012      	beq.n	8000de2 <update7SEGRoad1+0x3a>
		//led7segmentdisplay1(led_bufferRoad1[1]);
		display7SEGRoad1(led_bufferRoad1[1]);
		break;

	default:
		break;
 8000dbc:	e023      	b.n	8000e06 <update7SEGRoad1+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	4812      	ldr	r0, [pc, #72]	; (8000e10 <update7SEGRoad1+0x68>)
 8000dc6:	f001 f8b4 	bl	8001f32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <update7SEGRoad1+0x68>)
 8000dd2:	f001 f8ae 	bl	8001f32 <HAL_GPIO_WritePin>
		display7SEGRoad1(led_bufferRoad1[0]);
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <update7SEGRoad1+0x6c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f854 	bl	8000e88 <display7SEGRoad1>
		break;
 8000de0:	e011      	b.n	8000e06 <update7SEGRoad1+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <update7SEGRoad1+0x68>)
 8000dea:	f001 f8a2 	bl	8001f32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <update7SEGRoad1+0x68>)
 8000df6:	f001 f89c 	bl	8001f32 <HAL_GPIO_WritePin>
		display7SEGRoad1(led_bufferRoad1[1]);
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <update7SEGRoad1+0x6c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f842 	bl	8000e88 <display7SEGRoad1>
		break;
 8000e04:	bf00      	nop
	}
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	20000074 	.word	0x20000074

08000e18 <update7SEGRoad2>:

void update7SEGRoad2 (int index){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	switch(index){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <update7SEGRoad2+0x16>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d012      	beq.n	8000e52 <update7SEGRoad2+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
		//led7segmentdisplay2(led_bufferRoad2[1]);
		display7SEGRoad2(led_bufferRoad2[1]);
		break;
	default:
		break;
 8000e2c:	e023      	b.n	8000e76 <update7SEGRoad2+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <update7SEGRoad2+0x68>)
 8000e36:	f001 f87c 	bl	8001f32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e40:	480f      	ldr	r0, [pc, #60]	; (8000e80 <update7SEGRoad2+0x68>)
 8000e42:	f001 f876 	bl	8001f32 <HAL_GPIO_WritePin>
		display7SEGRoad2(led_bufferRoad2[0]);
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <update7SEGRoad2+0x6c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f964 	bl	8001118 <display7SEGRoad2>
		break;
 8000e50:	e011      	b.n	8000e76 <update7SEGRoad2+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <update7SEGRoad2+0x68>)
 8000e5a:	f001 f86a 	bl	8001f32 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <update7SEGRoad2+0x68>)
 8000e66:	f001 f864 	bl	8001f32 <HAL_GPIO_WritePin>
		display7SEGRoad2(led_bufferRoad2[1]);
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <update7SEGRoad2+0x6c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f952 	bl	8001118 <display7SEGRoad2>
		break;
 8000e74:	bf00      	nop
	}
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	2000007c 	.word	0x2000007c

08000e88 <display7SEGRoad1>:
void display7SEGRoad1(int value)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	489f      	ldr	r0, [pc, #636]	; (8001114 <display7SEGRoad1+0x28c>)
 8000e96:	f001 f84c 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	489d      	ldr	r0, [pc, #628]	; (8001114 <display7SEGRoad1+0x28c>)
 8000ea0:	f001 f847 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	489a      	ldr	r0, [pc, #616]	; (8001114 <display7SEGRoad1+0x28c>)
 8000eaa:	f001 f842 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4898      	ldr	r0, [pc, #608]	; (8001114 <display7SEGRoad1+0x28c>)
 8000eb4:	f001 f83d 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG4_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4895      	ldr	r0, [pc, #596]	; (8001114 <display7SEGRoad1+0x28c>)
 8000ebe:	f001 f838 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4893      	ldr	r0, [pc, #588]	; (8001114 <display7SEGRoad1+0x28c>)
 8000ec8:	f001 f833 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	4890      	ldr	r0, [pc, #576]	; (8001114 <display7SEGRoad1+0x28c>)
 8000ed2:	f001 f82e 	bl	8001f32 <HAL_GPIO_WritePin>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b09      	cmp	r3, #9
 8000eda:	f200 8116 	bhi.w	800110a <display7SEGRoad1+0x282>
 8000ede:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <display7SEGRoad1+0x5c>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	08000f4b 	.word	0x08000f4b
 8000eec:	08000f61 	.word	0x08000f61
 8000ef0:	08000f95 	.word	0x08000f95
 8000ef4:	08000fc9 	.word	0x08000fc9
 8000ef8:	08000ff3 	.word	0x08000ff3
 8000efc:	08001027 	.word	0x08001027
 8000f00:	08001065 	.word	0x08001065
 8000f04:	08001085 	.word	0x08001085
 8000f08:	080010cd 	.word	0x080010cd

	switch(value){
		case 0:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4880      	ldr	r0, [pc, #512]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f12:	f001 f80e 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	487e      	ldr	r0, [pc, #504]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f1c:	f001 f809 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	487b      	ldr	r0, [pc, #492]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f26:	f001 f804 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4879      	ldr	r0, [pc, #484]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f30:	f000 ffff 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG4_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2110      	movs	r1, #16
 8000f38:	4876      	ldr	r0, [pc, #472]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f3a:	f000 fffa 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	4874      	ldr	r0, [pc, #464]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f44:	f000 fff5 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8000f48:	e0e0      	b.n	800110c <display7SEGRoad1+0x284>
		case 1:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4871      	ldr	r0, [pc, #452]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f50:	f000 ffef 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	486e      	ldr	r0, [pc, #440]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f5a:	f000 ffea 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8000f5e:	e0d5      	b.n	800110c <display7SEGRoad1+0x284>
		case 2:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	486b      	ldr	r0, [pc, #428]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f66:	f000 ffe4 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4869      	ldr	r0, [pc, #420]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f70:	f000 ffdf 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2108      	movs	r1, #8
 8000f78:	4866      	ldr	r0, [pc, #408]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f7a:	f000 ffda 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG4_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2110      	movs	r1, #16
 8000f82:	4864      	ldr	r0, [pc, #400]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f84:	f000 ffd5 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2140      	movs	r1, #64	; 0x40
 8000f8c:	4861      	ldr	r0, [pc, #388]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f8e:	f000 ffd0 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8000f92:	e0bb      	b.n	800110c <display7SEGRoad1+0x284>
		case 3:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2101      	movs	r1, #1
 8000f98:	485e      	ldr	r0, [pc, #376]	; (8001114 <display7SEGRoad1+0x28c>)
 8000f9a:	f000 ffca 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	485c      	ldr	r0, [pc, #368]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fa4:	f000 ffc5 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	4859      	ldr	r0, [pc, #356]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fae:	f000 ffc0 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4857      	ldr	r0, [pc, #348]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fb8:	f000 ffbb 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4854      	ldr	r0, [pc, #336]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fc2:	f000 ffb6 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8000fc6:	e0a1      	b.n	800110c <display7SEGRoad1+0x284>
		case 4:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4851      	ldr	r0, [pc, #324]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fce:	f000 ffb0 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	484f      	ldr	r0, [pc, #316]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fd8:	f000 ffab 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2120      	movs	r1, #32
 8000fe0:	484c      	ldr	r0, [pc, #304]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fe2:	f000 ffa6 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	; 0x40
 8000fea:	484a      	ldr	r0, [pc, #296]	; (8001114 <display7SEGRoad1+0x28c>)
 8000fec:	f000 ffa1 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8000ff0:	e08c      	b.n	800110c <display7SEGRoad1+0x284>
		case 5:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4847      	ldr	r0, [pc, #284]	; (8001114 <display7SEGRoad1+0x28c>)
 8000ff8:	f000 ff9b 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	4844      	ldr	r0, [pc, #272]	; (8001114 <display7SEGRoad1+0x28c>)
 8001002:	f000 ff96 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2108      	movs	r1, #8
 800100a:	4842      	ldr	r0, [pc, #264]	; (8001114 <display7SEGRoad1+0x28c>)
 800100c:	f000 ff91 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2120      	movs	r1, #32
 8001014:	483f      	ldr	r0, [pc, #252]	; (8001114 <display7SEGRoad1+0x28c>)
 8001016:	f000 ff8c 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	483d      	ldr	r0, [pc, #244]	; (8001114 <display7SEGRoad1+0x28c>)
 8001020:	f000 ff87 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8001024:	e072      	b.n	800110c <display7SEGRoad1+0x284>
		case 6:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	483a      	ldr	r0, [pc, #232]	; (8001114 <display7SEGRoad1+0x28c>)
 800102c:	f000 ff81 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2104      	movs	r1, #4
 8001034:	4837      	ldr	r0, [pc, #220]	; (8001114 <display7SEGRoad1+0x28c>)
 8001036:	f000 ff7c 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2108      	movs	r1, #8
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <display7SEGRoad1+0x28c>)
 8001040:	f000 ff77 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG4_Pin, RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2110      	movs	r1, #16
 8001048:	4832      	ldr	r0, [pc, #200]	; (8001114 <display7SEGRoad1+0x28c>)
 800104a:	f000 ff72 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2120      	movs	r1, #32
 8001052:	4830      	ldr	r0, [pc, #192]	; (8001114 <display7SEGRoad1+0x28c>)
 8001054:	f000 ff6d 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	482d      	ldr	r0, [pc, #180]	; (8001114 <display7SEGRoad1+0x28c>)
 800105e:	f000 ff68 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8001062:	e053      	b.n	800110c <display7SEGRoad1+0x284>
		case 7:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	482a      	ldr	r0, [pc, #168]	; (8001114 <display7SEGRoad1+0x28c>)
 800106a:	f000 ff62 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <display7SEGRoad1+0x28c>)
 8001074:	f000 ff5d 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2104      	movs	r1, #4
 800107c:	4825      	ldr	r0, [pc, #148]	; (8001114 <display7SEGRoad1+0x28c>)
 800107e:	f000 ff58 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8001082:	e043      	b.n	800110c <display7SEGRoad1+0x284>
		case 8:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	4822      	ldr	r0, [pc, #136]	; (8001114 <display7SEGRoad1+0x28c>)
 800108a:	f000 ff52 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <display7SEGRoad1+0x28c>)
 8001094:	f000 ff4d 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2104      	movs	r1, #4
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <display7SEGRoad1+0x28c>)
 800109e:	f000 ff48 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2108      	movs	r1, #8
 80010a6:	481b      	ldr	r0, [pc, #108]	; (8001114 <display7SEGRoad1+0x28c>)
 80010a8:	f000 ff43 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG4_Pin, RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <display7SEGRoad1+0x28c>)
 80010b2:	f000 ff3e 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <display7SEGRoad1+0x28c>)
 80010bc:	f000 ff39 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <display7SEGRoad1+0x28c>)
 80010c6:	f000 ff34 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 80010ca:	e01f      	b.n	800110c <display7SEGRoad1+0x284>
		case 9:
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG0_Pin, RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2101      	movs	r1, #1
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <display7SEGRoad1+0x28c>)
 80010d2:	f000 ff2e 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG1_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <display7SEGRoad1+0x28c>)
 80010dc:	f000 ff29 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG2_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <display7SEGRoad1+0x28c>)
 80010e6:	f000 ff24 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG3_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2108      	movs	r1, #8
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <display7SEGRoad1+0x28c>)
 80010f0:	f000 ff1f 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG5_Pin, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <display7SEGRoad1+0x28c>)
 80010fa:	f000 ff1a 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_GPIO_Port, SEG6_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2140      	movs	r1, #64	; 0x40
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <display7SEGRoad1+0x28c>)
 8001104:	f000 ff15 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8001108:	e000      	b.n	800110c <display7SEGRoad1+0x284>
		default:
			break;
 800110a:	bf00      	nop
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010c00 	.word	0x40010c00

08001118 <display7SEGRoad2>:
void display7SEGRoad2(int value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	48bc      	ldr	r0, [pc, #752]	; (8001418 <display7SEGRoad2+0x300>)
 8001128:	f000 ff03 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, SET);
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	48b9      	ldr	r0, [pc, #740]	; (8001418 <display7SEGRoad2+0x300>)
 8001134:	f000 fefd 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	48b6      	ldr	r0, [pc, #728]	; (8001418 <display7SEGRoad2+0x300>)
 8001140:	f000 fef7 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114a:	48b3      	ldr	r0, [pc, #716]	; (8001418 <display7SEGRoad2+0x300>)
 800114c:	f000 fef1 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG14_Pin, SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	48b0      	ldr	r0, [pc, #704]	; (8001418 <display7SEGRoad2+0x300>)
 8001158:	f000 feeb 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	48ad      	ldr	r0, [pc, #692]	; (8001418 <display7SEGRoad2+0x300>)
 8001164:	f000 fee5 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116e:	48aa      	ldr	r0, [pc, #680]	; (8001418 <display7SEGRoad2+0x300>)
 8001170:	f000 fedf 	bl	8001f32 <HAL_GPIO_WritePin>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b09      	cmp	r3, #9
 8001178:	f200 8148 	bhi.w	800140c <display7SEGRoad2+0x2f4>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <display7SEGRoad2+0x6c>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	080011ad 	.word	0x080011ad
 8001188:	080011f7 	.word	0x080011f7
 800118c:	08001211 	.word	0x08001211
 8001190:	0800124f 	.word	0x0800124f
 8001194:	0800128d 	.word	0x0800128d
 8001198:	080012bf 	.word	0x080012bf
 800119c:	080012fd 	.word	0x080012fd
 80011a0:	08001347 	.word	0x08001347
 80011a4:	0800136d 	.word	0x0800136d
 80011a8:	080013c3 	.word	0x080013c3

	switch(value){
		case 0:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4899      	ldr	r0, [pc, #612]	; (8001418 <display7SEGRoad2+0x300>)
 80011b4:	f000 febd 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011be:	4896      	ldr	r0, [pc, #600]	; (8001418 <display7SEGRoad2+0x300>)
 80011c0:	f000 feb7 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4893      	ldr	r0, [pc, #588]	; (8001418 <display7SEGRoad2+0x300>)
 80011cc:	f000 feb1 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	4890      	ldr	r0, [pc, #576]	; (8001418 <display7SEGRoad2+0x300>)
 80011d8:	f000 feab 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG14_Pin, RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e2:	488d      	ldr	r0, [pc, #564]	; (8001418 <display7SEGRoad2+0x300>)
 80011e4:	f000 fea5 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	488a      	ldr	r0, [pc, #552]	; (8001418 <display7SEGRoad2+0x300>)
 80011f0:	f000 fe9f 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 80011f4:	e10b      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 1:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fc:	4886      	ldr	r0, [pc, #536]	; (8001418 <display7SEGRoad2+0x300>)
 80011fe:	f000 fe98 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4883      	ldr	r0, [pc, #524]	; (8001418 <display7SEGRoad2+0x300>)
 800120a:	f000 fe92 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 800120e:	e0fe      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 2:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	4880      	ldr	r0, [pc, #512]	; (8001418 <display7SEGRoad2+0x300>)
 8001218:	f000 fe8b 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001222:	487d      	ldr	r0, [pc, #500]	; (8001418 <display7SEGRoad2+0x300>)
 8001224:	f000 fe85 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122e:	487a      	ldr	r0, [pc, #488]	; (8001418 <display7SEGRoad2+0x300>)
 8001230:	f000 fe7f 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG14_Pin, RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123a:	4877      	ldr	r0, [pc, #476]	; (8001418 <display7SEGRoad2+0x300>)
 800123c:	f000 fe79 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001246:	4874      	ldr	r0, [pc, #464]	; (8001418 <display7SEGRoad2+0x300>)
 8001248:	f000 fe73 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 800124c:	e0df      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 3:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	4870      	ldr	r0, [pc, #448]	; (8001418 <display7SEGRoad2+0x300>)
 8001256:	f000 fe6c 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001260:	486d      	ldr	r0, [pc, #436]	; (8001418 <display7SEGRoad2+0x300>)
 8001262:	f000 fe66 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126c:	486a      	ldr	r0, [pc, #424]	; (8001418 <display7SEGRoad2+0x300>)
 800126e:	f000 fe60 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001278:	4867      	ldr	r0, [pc, #412]	; (8001418 <display7SEGRoad2+0x300>)
 800127a:	f000 fe5a 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001284:	4864      	ldr	r0, [pc, #400]	; (8001418 <display7SEGRoad2+0x300>)
 8001286:	f000 fe54 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 800128a:	e0c0      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 4:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4861      	ldr	r0, [pc, #388]	; (8001418 <display7SEGRoad2+0x300>)
 8001294:	f000 fe4d 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	485e      	ldr	r0, [pc, #376]	; (8001418 <display7SEGRoad2+0x300>)
 80012a0:	f000 fe47 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	485b      	ldr	r0, [pc, #364]	; (8001418 <display7SEGRoad2+0x300>)
 80012ac:	f000 fe41 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4858      	ldr	r0, [pc, #352]	; (8001418 <display7SEGRoad2+0x300>)
 80012b8:	f000 fe3b 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 80012bc:	e0a7      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 5:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	4854      	ldr	r0, [pc, #336]	; (8001418 <display7SEGRoad2+0x300>)
 80012c6:	f000 fe34 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d0:	4851      	ldr	r0, [pc, #324]	; (8001418 <display7SEGRoad2+0x300>)
 80012d2:	f000 fe2e 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012dc:	484e      	ldr	r0, [pc, #312]	; (8001418 <display7SEGRoad2+0x300>)
 80012de:	f000 fe28 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	484b      	ldr	r0, [pc, #300]	; (8001418 <display7SEGRoad2+0x300>)
 80012ea:	f000 fe22 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	4848      	ldr	r0, [pc, #288]	; (8001418 <display7SEGRoad2+0x300>)
 80012f6:	f000 fe1c 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 80012fa:	e088      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 6:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4845      	ldr	r0, [pc, #276]	; (8001418 <display7SEGRoad2+0x300>)
 8001304:	f000 fe15 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	4842      	ldr	r0, [pc, #264]	; (8001418 <display7SEGRoad2+0x300>)
 8001310:	f000 fe0f 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131a:	483f      	ldr	r0, [pc, #252]	; (8001418 <display7SEGRoad2+0x300>)
 800131c:	f000 fe09 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG14_Pin, RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	483c      	ldr	r0, [pc, #240]	; (8001418 <display7SEGRoad2+0x300>)
 8001328:	f000 fe03 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001332:	4839      	ldr	r0, [pc, #228]	; (8001418 <display7SEGRoad2+0x300>)
 8001334:	f000 fdfd 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133e:	4836      	ldr	r0, [pc, #216]	; (8001418 <display7SEGRoad2+0x300>)
 8001340:	f000 fdf7 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 8001344:	e063      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 7:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4832      	ldr	r0, [pc, #200]	; (8001418 <display7SEGRoad2+0x300>)
 800134e:	f000 fdf0 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <display7SEGRoad2+0x300>)
 800135a:	f000 fdea 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	482c      	ldr	r0, [pc, #176]	; (8001418 <display7SEGRoad2+0x300>)
 8001366:	f000 fde4 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 800136a:	e050      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 8:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4829      	ldr	r0, [pc, #164]	; (8001418 <display7SEGRoad2+0x300>)
 8001374:	f000 fddd 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <display7SEGRoad2+0x300>)
 8001380:	f000 fdd7 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <display7SEGRoad2+0x300>)
 800138c:	f000 fdd1 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001396:	4820      	ldr	r0, [pc, #128]	; (8001418 <display7SEGRoad2+0x300>)
 8001398:	f000 fdcb 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG14_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <display7SEGRoad2+0x300>)
 80013a4:	f000 fdc5 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <display7SEGRoad2+0x300>)
 80013b0:	f000 fdbf 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <display7SEGRoad2+0x300>)
 80013bc:	f000 fdb9 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 80013c0:	e025      	b.n	800140e <display7SEGRoad2+0x2f6>
		case 9:
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG10_Pin, RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <display7SEGRoad2+0x300>)
 80013ca:	f000 fdb2 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG11_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <display7SEGRoad2+0x300>)
 80013d6:	f000 fdac 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG12_Pin, RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <display7SEGRoad2+0x300>)
 80013e2:	f000 fda6 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG13_Pin, RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ec:	480a      	ldr	r0, [pc, #40]	; (8001418 <display7SEGRoad2+0x300>)
 80013ee:	f000 fda0 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG15_Pin, RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <display7SEGRoad2+0x300>)
 80013fa:	f000 fd9a 	bl	8001f32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG16_Pin, RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <display7SEGRoad2+0x300>)
 8001406:	f000 fd94 	bl	8001f32 <HAL_GPIO_WritePin>
			break;
 800140a:	e000      	b.n	800140e <display7SEGRoad2+0x2f6>
		default:
			break;
 800140c:	bf00      	nop
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40010800 	.word	0x40010800

0800141c <setTimerRoad1>:
int timer2_flag = 0;




void setTimerRoad1(int duration){
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	timerRoad1_counter = duration/timercycle;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <setTimerRoad1+0x2c>)
 8001428:	fb82 1203 	smull	r1, r2, r2, r3
 800142c:	1092      	asrs	r2, r2, #2
 800142e:	17db      	asrs	r3, r3, #31
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <setTimerRoad1+0x30>)
 8001434:	6013      	str	r3, [r2, #0]
	timerRoad1_flag = 0;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <setTimerRoad1+0x34>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	66666667 	.word	0x66666667
 800144c:	20000084 	.word	0x20000084
 8001450:	20000090 	.word	0x20000090

08001454 <setTimerRoad2>:

void setTimerRoad2(int duration){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	timerRoad2_counter = duration/timercycle;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <setTimerRoad2+0x2c>)
 8001460:	fb82 1203 	smull	r1, r2, r2, r3
 8001464:	1092      	asrs	r2, r2, #2
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <setTimerRoad2+0x30>)
 800146c:	6013      	str	r3, [r2, #0]
	timerRoad2_flag = 0;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <setTimerRoad2+0x34>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	66666667 	.word	0x66666667
 8001484:	20000088 	.word	0x20000088
 8001488:	20000094 	.word	0x20000094

0800148c <setTimer2>:

void setTimer2(){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	timer2_counter = 50;
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <setTimer2+0x18>)
 8001492:	2232      	movs	r2, #50	; 0x32
 8001494:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <setTimer2+0x1c>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	2000008c 	.word	0x2000008c
 80014a8:	20000098 	.word	0x20000098

080014ac <timerRun>:

void timerRun(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	if (timerRoad1_counter > 0){
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <timerRun+0x80>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <timerRun+0x24>
		timerRoad1_counter--;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <timerRun+0x80>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <timerRun+0x80>)
 80014c0:	6013      	str	r3, [r2, #0]
		if(timerRoad1_counter <= 0){
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <timerRun+0x80>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <timerRun+0x24>
			timerRoad1_flag = 1;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <timerRun+0x84>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (timerRoad2_counter > 0){
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <timerRun+0x88>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <timerRun+0x44>
		timerRoad2_counter--;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <timerRun+0x88>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <timerRun+0x88>)
 80014e0:	6013      	str	r3, [r2, #0]
		if(timerRoad2_counter <= 0){
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <timerRun+0x88>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <timerRun+0x44>
			timerRoad2_flag = 1;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <timerRun+0x8c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <timerRun+0x90>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd15      	ble.n	8001524 <timerRun+0x78>
		timer2_counter--;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <timerRun+0x90>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <timerRun+0x90>)
 8001500:	6013      	str	r3, [r2, #0]
		road1duration-=10;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <timerRun+0x94>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3b0a      	subs	r3, #10
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <timerRun+0x94>)
 800150a:	6013      	str	r3, [r2, #0]
		road2duration-=10;
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <timerRun+0x98>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3b0a      	subs	r3, #10
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <timerRun+0x98>)
 8001514:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <timerRun+0x90>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc02      	bgt.n	8001524 <timerRun+0x78>
			timer2_flag = 1;
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <timerRun+0x9c>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000084 	.word	0x20000084
 8001530:	20000090 	.word	0x20000090
 8001534:	20000088 	.word	0x20000088
 8001538:	20000094 	.word	0x20000094
 800153c:	2000008c 	.word	0x2000008c
 8001540:	20000064 	.word	0x20000064
 8001544:	20000068 	.word	0x20000068
 8001548:	20000098 	.word	0x20000098

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_MspInit+0x5c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <HAL_MspInit+0x5c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x5c>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x5c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_MspInit+0x60>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_MspInit+0x60>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000

080015b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c0:	d113      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_TIM_Base_MspInit+0x44>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f000 fadf 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f000 faf8 	bl	8001bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163e:	f000 f9bd 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM2_IRQHandler+0x10>)
 800164e:	f001 f919 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000cc 	.word	0x200000cc

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <traffic_1red_2red>:
 *      Author: ASUS
 */

#include <traffic.h>

void traffic_1red_2red(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	480e      	ldr	r0, [pc, #56]	; (80016ac <traffic_1red_2red+0x44>)
 8001672:	f000 fc5e 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <traffic_1red_2red+0x44>)
 800167c:	f000 fc59 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <traffic_1red_2red+0x44>)
 8001686:	f000 fc54 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	2104      	movs	r1, #4
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <traffic_1red_2red+0x44>)
 8001690:	f000 fc4f 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2108      	movs	r1, #8
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <traffic_1red_2red+0x44>)
 800169a:	f000 fc4a 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2110      	movs	r1, #16
 80016a2:	4802      	ldr	r0, [pc, #8]	; (80016ac <traffic_1red_2red+0x44>)
 80016a4:	f000 fc45 	bl	8001f32 <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40010800 	.word	0x40010800

080016b0 <traffic_1red_2green>:
void traffic_1red_2green(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2120      	movs	r1, #32
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <traffic_1red_2green+0x44>)
 80016ba:	f000 fc3a 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	480c      	ldr	r0, [pc, #48]	; (80016f4 <traffic_1red_2green+0x44>)
 80016c4:	f000 fc35 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <traffic_1red_2green+0x44>)
 80016ce:	f000 fc30 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <traffic_1red_2green+0x44>)
 80016d8:	f000 fc2b 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2108      	movs	r1, #8
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <traffic_1red_2green+0x44>)
 80016e2:	f000 fc26 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2110      	movs	r1, #16
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <traffic_1red_2green+0x44>)
 80016ec:	f000 fc21 	bl	8001f32 <HAL_GPIO_WritePin>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40010800 	.word	0x40010800

080016f8 <traffic_1red_2yellow>:
void traffic_1red_2yellow(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2120      	movs	r1, #32
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <traffic_1red_2yellow+0x44>)
 8001702:	f000 fc16 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <traffic_1red_2yellow+0x44>)
 800170c:	f000 fc11 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <traffic_1red_2yellow+0x44>)
 8001716:	f000 fc0c 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2104      	movs	r1, #4
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <traffic_1red_2yellow+0x44>)
 8001720:	f000 fc07 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2108      	movs	r1, #8
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <traffic_1red_2yellow+0x44>)
 800172a:	f000 fc02 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2110      	movs	r1, #16
 8001732:	4802      	ldr	r0, [pc, #8]	; (800173c <traffic_1red_2yellow+0x44>)
 8001734:	f000 fbfd 	bl	8001f32 <HAL_GPIO_WritePin>

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40010800 	.word	0x40010800

08001740 <traffic_1green_2red>:
void traffic_1green_2red(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2120      	movs	r1, #32
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <traffic_1green_2red+0x44>)
 800174a:	f000 fbf2 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2140      	movs	r1, #64	; 0x40
 8001752:	480c      	ldr	r0, [pc, #48]	; (8001784 <traffic_1green_2red+0x44>)
 8001754:	f000 fbed 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <traffic_1green_2red+0x44>)
 800175e:	f000 fbe8 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	2104      	movs	r1, #4
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <traffic_1green_2red+0x44>)
 8001768:	f000 fbe3 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2108      	movs	r1, #8
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <traffic_1green_2red+0x44>)
 8001772:	f000 fbde 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2110      	movs	r1, #16
 800177a:	4802      	ldr	r0, [pc, #8]	; (8001784 <traffic_1green_2red+0x44>)
 800177c:	f000 fbd9 	bl	8001f32 <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010800 	.word	0x40010800

08001788 <traffic_1yellow_2red>:
void traffic_1yellow_2red(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	480e      	ldr	r0, [pc, #56]	; (80017cc <traffic_1yellow_2red+0x44>)
 8001792:	f000 fbce 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	2140      	movs	r1, #64	; 0x40
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <traffic_1yellow_2red+0x44>)
 800179c:	f000 fbc9 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <traffic_1yellow_2red+0x44>)
 80017a6:	f000 fbc4 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2104      	movs	r1, #4
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <traffic_1yellow_2red+0x44>)
 80017b0:	f000 fbbf 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2108      	movs	r1, #8
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <traffic_1yellow_2red+0x44>)
 80017ba:	f000 fbba 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2110      	movs	r1, #16
 80017c2:	4802      	ldr	r0, [pc, #8]	; (80017cc <traffic_1yellow_2red+0x44>)
 80017c4:	f000 fbb5 	bl	8001f32 <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010800 	.word	0x40010800

080017d0 <traffic_turnoffall>:
void traffic_turnoffall(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	480e      	ldr	r0, [pc, #56]	; (8001814 <traffic_turnoffall+0x44>)
 80017da:	f000 fbaa 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <traffic_turnoffall+0x44>)
 80017e4:	f000 fba5 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <traffic_turnoffall+0x44>)
 80017ee:	f000 fba0 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2104      	movs	r1, #4
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <traffic_turnoffall+0x44>)
 80017f8:	f000 fb9b 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2108      	movs	r1, #8
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <traffic_turnoffall+0x44>)
 8001802:	f000 fb96 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2110      	movs	r1, #16
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <traffic_turnoffall+0x44>)
 800180c:	f000 fb91 	bl	8001f32 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010800 	.word	0x40010800

08001818 <traffic_manualred>:

void traffic_manualred(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800181c:	2120      	movs	r1, #32
 800181e:	480e      	ldr	r0, [pc, #56]	; (8001858 <traffic_manualred+0x40>)
 8001820:	f000 fb9f 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001824:	2104      	movs	r1, #4
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <traffic_manualred+0x40>)
 8001828:	f000 fb9b 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <traffic_manualred+0x40>)
 8001832:	f000 fb7e 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <traffic_manualred+0x40>)
 800183c:	f000 fb79 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2108      	movs	r1, #8
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <traffic_manualred+0x40>)
 8001846:	f000 fb74 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2110      	movs	r1, #16
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <traffic_manualred+0x40>)
 8001850:	f000 fb6f 	bl	8001f32 <HAL_GPIO_WritePin>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40010800 	.word	0x40010800

0800185c <traffic_manualgreen>:
void traffic_manualgreen(){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <traffic_manualgreen+0x40>)
 8001864:	f000 fb7d 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001868:	2110      	movs	r1, #16
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <traffic_manualgreen+0x40>)
 800186c:	f000 fb79 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <traffic_manualgreen+0x40>)
 8001876:	f000 fb5c 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <traffic_manualgreen+0x40>)
 8001880:	f000 fb57 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2108      	movs	r1, #8
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <traffic_manualgreen+0x40>)
 800188a:	f000 fb52 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2104      	movs	r1, #4
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <traffic_manualgreen+0x40>)
 8001894:	f000 fb4d 	bl	8001f32 <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40010800 	.word	0x40010800

080018a0 <traffic_manualyellow>:
void traffic_manualyellow(){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <traffic_manualyellow+0x40>)
 80018a8:	f000 fb5b 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80018ac:	2108      	movs	r1, #8
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <traffic_manualyellow+0x40>)
 80018b0:	f000 fb57 	bl	8001f62 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <traffic_manualyellow+0x40>)
 80018ba:	f000 fb3a 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2120      	movs	r1, #32
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <traffic_manualyellow+0x40>)
 80018c4:	f000 fb35 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2110      	movs	r1, #16
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <traffic_manualyellow+0x40>)
 80018ce:	f000 fb30 	bl	8001f32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2104      	movs	r1, #4
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <traffic_manualyellow+0x40>)
 80018d8:	f000 fb2b 	bl	8001f32 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010800 	.word	0x40010800

080018e4 <Reset_Handler>:
 80018e4:	f7ff feba 	bl	800165c <SystemInit>
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0xe>)
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <LoopFillZerobss+0x12>)
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <LoopFillZerobss+0x16>)
 80018ee:	2300      	movs	r3, #0
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:
 80018f2:	58d4      	ldr	r4, [r2, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:
 80018f8:	18c4      	adds	r4, r0, r3
 80018fa:	428c      	cmp	r4, r1
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <LoopFillZerobss+0x1a>)
 8001900:	4c09      	ldr	r4, [pc, #36]	; (8001928 <LoopFillZerobss+0x1e>)
 8001902:	2300      	movs	r3, #0
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:
 800190a:	42a2      	cmp	r2, r4
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>
 800190e:	f001 faf9 	bl	8002f04 <__libc_init_array>
 8001912:	f7fe ff7b 	bl	800080c <main>
 8001916:	4770      	bx	lr
 8001918:	20000000 	.word	0x20000000
 800191c:	20000038 	.word	0x20000038
 8001920:	08002fa0 	.word	0x08002fa0
 8001924:	20000038 	.word	0x20000038
 8001928:	20000118 	.word	0x20000118

0800192c <ADC1_2_IRQHandler>:
 800192c:	e7fe      	b.n	800192c <ADC1_2_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x28>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x28>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f923 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fdfe 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f93b 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f903 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000002c 	.word	0x2000002c
 80019b4:	20000034 	.word	0x20000034
 80019b8:	20000030 	.word	0x20000030

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x20>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_IncTick+0x20>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000034 	.word	0x20000034
 80019dc:	20000114 	.word	0x20000114

080019e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_GetTick+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000114 	.word	0x20000114

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff90 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff2d 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff42 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff90 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5f 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff35 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
 8001c10:	b480      	push	{r7}
 8001c12:	b08b      	sub	sp, #44	; 0x2c
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	e148      	b.n	8001eb6 <HAL_GPIO_Init+0x2a6>
 8001c24:	2201      	movs	r2, #1
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8137 	bne.w	8001eb0 <HAL_GPIO_Init+0x2a0>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4aa3      	ldr	r2, [pc, #652]	; (8001ed4 <HAL_GPIO_Init+0x2c4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d05e      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c4c:	4aa1      	ldr	r2, [pc, #644]	; (8001ed4 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d875      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c52:	4aa1      	ldr	r2, [pc, #644]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d058      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c58:	4a9f      	ldr	r2, [pc, #636]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d86f      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c5e:	4a9f      	ldr	r2, [pc, #636]	; (8001edc <HAL_GPIO_Init+0x2cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d052      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c64:	4a9d      	ldr	r2, [pc, #628]	; (8001edc <HAL_GPIO_Init+0x2cc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d869      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c6a:	4a9d      	ldr	r2, [pc, #628]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d04c      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c70:	4a9b      	ldr	r2, [pc, #620]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d863      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c76:	4a9b      	ldr	r2, [pc, #620]	; (8001ee4 <HAL_GPIO_Init+0x2d4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d046      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a99      	ldr	r2, [pc, #612]	; (8001ee4 <HAL_GPIO_Init+0x2d4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d85d      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d82a      	bhi.n	8001cdc <HAL_GPIO_Init+0xcc>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d859      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_GPIO_Init+0x80>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001ce5 	.word	0x08001ce5
 8001c98:	08001cf7 	.word	0x08001cf7
 8001c9c:	08001d39 	.word	0x08001d39
 8001ca0:	08001d3f 	.word	0x08001d3f
 8001ca4:	08001d3f 	.word	0x08001d3f
 8001ca8:	08001d3f 	.word	0x08001d3f
 8001cac:	08001d3f 	.word	0x08001d3f
 8001cb0:	08001d3f 	.word	0x08001d3f
 8001cb4:	08001d3f 	.word	0x08001d3f
 8001cb8:	08001d3f 	.word	0x08001d3f
 8001cbc:	08001d3f 	.word	0x08001d3f
 8001cc0:	08001d3f 	.word	0x08001d3f
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d3f 	.word	0x08001d3f
 8001ccc:	08001d3f 	.word	0x08001d3f
 8001cd0:	08001d3f 	.word	0x08001d3f
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	4a82      	ldr	r2, [pc, #520]	; (8001ee8 <HAL_GPIO_Init+0x2d8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001ce2:	e02c      	b.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	e029      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	e024      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	e01f      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	330c      	adds	r3, #12
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	e01a      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_GPIO_Init+0x108>
 8001d12:	2304      	movs	r3, #4
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	e013      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_GPIO_Init+0x11c>
 8001d20:	2308      	movs	r3, #8
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	e009      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x130>
 8001d3e:	bf00      	nop
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d801      	bhi.n	8001d4a <HAL_GPIO_Init+0x13a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_Init+0x13e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2bff      	cmp	r3, #255	; 0xff
 8001d54:	d802      	bhi.n	8001d5c <HAL_GPIO_Init+0x14c>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x152>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3b08      	subs	r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	210f      	movs	r1, #15
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	401a      	ands	r2, r3
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8090 	beq.w	8001eb0 <HAL_GPIO_Init+0x2a0>
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a55      	ldr	r2, [pc, #340]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_GPIO_Init+0x2dc>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4a51      	ldr	r2, [pc, #324]	; (8001ef0 <HAL_GPIO_Init+0x2e0>)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a49      	ldr	r2, [pc, #292]	; (8001ef4 <HAL_GPIO_Init+0x2e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1e0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1dc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a47      	ldr	r2, [pc, #284]	; (8001efc <HAL_GPIO_Init+0x2ec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1d8>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x1e2>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	493b      	ldr	r1, [pc, #236]	; (8001ef0 <HAL_GPIO_Init+0x2e0>)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x21a>
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4937      	ldr	r1, [pc, #220]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x228>
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4933      	ldr	r1, [pc, #204]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x242>
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x250>
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4929      	ldr	r1, [pc, #164]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x26a>
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4923      	ldr	r1, [pc, #140]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x278>
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	491f      	ldr	r1, [pc, #124]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x292>
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4919      	ldr	r1, [pc, #100]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x2a0>
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4915      	ldr	r1, [pc, #84]	; (8001f00 <HAL_GPIO_Init+0x2f0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f aeaf 	bne.w	8001c24 <HAL_GPIO_Init+0x14>
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	372c      	adds	r7, #44	; 0x2c
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	10320000 	.word	0x10320000
 8001ed8:	10310000 	.word	0x10310000
 8001edc:	10220000 	.word	0x10220000
 8001ee0:	10210000 	.word	0x10210000
 8001ee4:	10120000 	.word	0x10120000
 8001ee8:	10110000 	.word	0x10110000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_GPIO_WritePin>:
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	707b      	strb	r3, [r7, #1]
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_WritePin+0x1e>
 8001f48:	887a      	ldrh	r2, [r7, #2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	e003      	b.n	8001f58 <HAL_GPIO_WritePin+0x26>
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	041a      	lsls	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_TogglePin>:
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	400b      	ands	r3, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_RCC_OscConfig>:
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e26c      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x12e>
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46>
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e246      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x76>
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xbc>
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x104>
 8002070:	f7ff fcb6 	bl	80019e0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xf6>
 8002078:	f7ff fcb2 	bl	80019e0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xf6>
 8002086:	2303      	movs	r3, #3
 8002088:	e1fa      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe4>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
 8002098:	f7ff fca2 	bl	80019e0 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x11e>
 80020a0:	f7ff fc9e 	bl	80019e0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x11e>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1e6      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x10c>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
 80020c0:	bf00      	nop
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x202>
 80020ce:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x15e>
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 8002106:	2301      	movs	r3, #1
 8002108:	e1ba      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4939      	ldr	r1, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f7ff fc57 	bl	80019e0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1b4>
 8002136:	f7ff fc53 	bl	80019e0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1b4>
 8002144:	2303      	movs	r3, #3
 8002146:	e19b      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1a2>
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f7ff fc36 	bl	80019e0 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f6>
 8002178:	f7ff fc32 	bl	80019e0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f6>
 8002186:	2303      	movs	r3, #3
 8002188:	e17a      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03a      	beq.n	8002218 <HAL_RCC_OscConfig+0x284>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x24a>
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f7ff fc16 	bl	80019e0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x236>
 80021b8:	f7ff fc12 	bl	80019e0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x236>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e15a      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x224>
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fa9a 	bl	8002710 <RCC_Delay>
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x284>
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f7ff fbfc 	bl	80019e0 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x278>
 80021ec:	f7ff fbf8 	bl	80019e0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d908      	bls.n	800220c <HAL_RCC_OscConfig+0x278>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e140      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	42420000 	.word	0x42420000
 8002208:	42420480 	.word	0x42420480
 800220c:	4b9e      	ldr	r3, [pc, #632]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e9      	bne.n	80021ec <HAL_RCC_OscConfig+0x258>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a6 	beq.w	8002372 <HAL_RCC_OscConfig+0x3de>
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
 800222a:	4b97      	ldr	r3, [pc, #604]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_RCC_OscConfig+0x2be>
 8002236:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a93      	ldr	r2, [pc, #588]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
 8002252:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2fc>
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	f7ff fbb9 	bl	80019e0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 8002272:	f7ff fbb5 	bl	80019e0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 8002280:	2303      	movs	r3, #3
 8002282:	e0fd      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2de>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a72      	ldr	r2, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x356>
 80022d0:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a6c      	ldr	r2, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a66      	ldr	r2, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x3a2>
 800230a:	f7ff fb69 	bl	80019e0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x394>
 8002312:	f7ff fb65 	bl	80019e0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x394>
 8002324:	2303      	movs	r3, #3
 8002326:	e0ab      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002328:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x37e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x3cc>
 8002336:	f7ff fb53 	bl	80019e0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
 800233e:	f7ff fb4f 	bl	80019e0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x3c0>
 8002350:	2303      	movs	r3, #3
 8002352:	e095      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x3aa>
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x3de>
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8081 	beq.w	800247e <HAL_RCC_OscConfig+0x4ea>
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d061      	beq.n	800244c <HAL_RCC_OscConfig+0x4b8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d146      	bne.n	800241e <HAL_RCC_OscConfig+0x48a>
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f7ff fb23 	bl	80019e0 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x41c>
 800239e:	f7ff fb1f 	bl	80019e0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x41c>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e067      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 80023b0:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x40a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	492d      	ldr	r1, [pc, #180]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	430b      	orrs	r3, r1
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f7ff faf3 	bl	80019e0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x47c>
 80023fe:	f7ff faef 	bl	80019e0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x47c>
 800240c:	2303      	movs	r3, #3
 800240e:	e037      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
 800241c:	e02f      	b.n	800247e <HAL_RCC_OscConfig+0x4ea>
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	f7ff fadc 	bl	80019e0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4aa>
 800242c:	f7ff fad8 	bl	80019e0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4aa>
 800243a:	2303      	movs	r3, #3
 800243c:	e020      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x498>
 800244a:	e018      	b.n	800247e <HAL_RCC_OscConfig+0x4ea>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
 8002454:	2301      	movs	r3, #1
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x4e6>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4ea>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 800247e:	2300      	movs	r3, #0
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	42420060 	.word	0x42420060

08002494 <HAL_RCC_ClockConfig>:
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d0      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x44>
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4965      	ldr	r1, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x92>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x68>
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fa:	6053      	str	r3, [r2, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x80>
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002512:	6053      	str	r3, [r2, #4]
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xb6>
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4936      	ldr	r1, [pc, #216]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	f7ff fa2c 	bl	80019e0 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
 800258c:	f7ff fa28 	bl	80019e0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
 800259e:	2303      	movs	r3, #3
 80025a0:	e053      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x150>
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4922      	ldr	r1, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x150>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x16e>
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x18e>
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1cc>)
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f98a 	bl	800195c <HAL_InitTick>
 8002648:	2300      	movs	r3, #0
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	08002f74 	.word	0x08002f74
 8002660:	2000002c 	.word	0x2000002c
 8002664:	20000030 	.word	0x20000030

08002668 <HAL_RCC_GetSysClockFreq>:
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b04      	cmp	r3, #4
 8002690:	d002      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x30>
 8002692:	2b08      	cmp	r3, #8
 8002694:	d003      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x36>
 8002696:	e027      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x80>
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e027      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x86>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	0c9b      	lsrs	r3, r3, #18
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x70>
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_GetSysClockFreq+0x94>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	0c5b      	lsrs	r3, r3, #17
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ca:	fb02 f203 	mul.w	r2, r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e004      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x86>
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	bf00      	nop
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	08002f84 	.word	0x08002f84
 8002708:	08002f94 	.word	0x08002f94
 800270c:	003d0900 	.word	0x003d0900

08002710 <RCC_Delay>:
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <RCC_Delay+0x34>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <RCC_Delay+0x38>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0a5b      	lsrs	r3, r3, #9
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	bf00      	nop
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	60fa      	str	r2, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f9      	bne.n	800272c <RCC_Delay+0x1c>
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	2000002c 	.word	0x2000002c
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_TIM_Base_Init>:
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_TIM_Base_Init+0x12>
 800275a:	2301      	movs	r3, #1
 800275c:	e041      	b.n	80027e2 <HAL_TIM_Base_Init+0x96>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_TIM_Base_Init+0x2c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe ff1c 	bl	80015b0 <HAL_TIM_Base_MspInit>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 fa56 	bl	8002c3c <TIM_Base_SetConfig>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027e0:	2300      	movs	r3, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_TIM_Base_Start_IT>:
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d001      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e035      	b.n	8002870 <HAL_TIM_Base_Start_IT+0x84>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_TIM_Base_Start_IT+0x90>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_TIM_Base_Start_IT+0x4e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d004      	beq.n	800283a <HAL_TIM_Base_Start_IT+0x4e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <HAL_TIM_Base_Start_IT+0x94>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d111      	bne.n	800285e <HAL_TIM_Base_Start_IT+0x72>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b06      	cmp	r3, #6
 800284a:	d010      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x82>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e007      	b.n	800286e <HAL_TIM_Base_Start_IT+0x82>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400

08002884 <HAL_TIM_IRQHandler>:
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x52>
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f998 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5e>
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f98b 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f99a 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d020      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0204 	mvn.w	r2, #4
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	771a      	strb	r2, [r3, #28]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x9e>
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f972 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xaa>
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f965 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f974 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0208 	mvn.w	r2, #8
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	771a      	strb	r2, [r3, #28]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0xea>
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f94c 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xf6>
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f93f 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f94e 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0210 	mvn.w	r2, #16
 800299c:	611a      	str	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2208      	movs	r2, #8
 80029a2:	771a      	strb	r2, [r3, #28]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0x136>
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f926 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0x142>
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f919 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f928 	bl	8002c16 <HAL_TIM_PWM_PulseFinishedCallback>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0201 	mvn.w	r2, #1
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe f814 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x190>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x190>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa6f 	bl	8002ef2 <HAL_TIMEx_BreakCallback>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1b4>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1b4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8f8 	bl	8002c28 <HAL_TIM_TriggerCallback>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x1d8>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x1d8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0220 	mvn.w	r2, #32
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa42 	bl	8002ee0 <HAL_TIMEx_CommutCallback>
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_ConfigClockSource>:
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_ConfigClockSource+0x1c>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0b4      	b.n	8002bea <HAL_TIM_ConfigClockSource+0x186>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab8:	d03e      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xd4>
 8002aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abe:	f200 8087 	bhi.w	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	f000 8086 	beq.w	8002bd6 <HAL_TIM_ConfigClockSource+0x172>
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d87f      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b70      	cmp	r3, #112	; 0x70
 8002ad2:	d01a      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xa6>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d87b      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b60      	cmp	r3, #96	; 0x60
 8002ada:	d050      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x11a>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d877      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b50      	cmp	r3, #80	; 0x50
 8002ae2:	d03c      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0xfa>
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d873      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d058      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x13a>
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d86f      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b30      	cmp	r3, #48	; 0x30
 8002af2:	d064      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x15a>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d86b      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d060      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x15a>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d867      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d05c      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x15a>
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d05a      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x15a>
 8002b08:	e062      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f000 f96a 	bl	8002df2 <TIM_ETR_SetConfig>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	e04f      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f000 f953 	bl	8002df2 <TIM_ETR_SetConfig>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	e03c      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f000 f8ca 	bl	8002d04 <TIM_TI1_ConfigInputStage>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2150      	movs	r1, #80	; 0x50
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f921 	bl	8002dbe <TIM_ITRx_SetConfig>
 8002b7c:	e02c      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f000 f8e8 	bl	8002d60 <TIM_TI2_ConfigInputStage>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2160      	movs	r1, #96	; 0x60
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f911 	bl	8002dbe <TIM_ITRx_SetConfig>
 8002b9c:	e01c      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 f8aa 	bl	8002d04 <TIM_TI1_ConfigInputStage>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2140      	movs	r1, #64	; 0x40
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f901 	bl	8002dbe <TIM_ITRx_SetConfig>
 8002bbc:	e00c      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f000 f8f8 	bl	8002dbe <TIM_ITRx_SetConfig>
 8002bce:	e003      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e000      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x174>
 8002bd6:	bf00      	nop
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_TIM_OC_DelayElapsedCallback>:
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIM_IC_CaptureCallback>:
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_TriggerCallback>:
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
	...

08002c3c <TIM_Base_SetConfig>:
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <TIM_Base_SetConfig+0xc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x28>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x28>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <TIM_Base_SetConfig+0xc4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x3a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <TIM_Base_SetConfig+0xc0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0x52>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0x52>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <TIM_Base_SetConfig+0xc4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <TIM_Base_SetConfig+0x64>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <TIM_Base_SetConfig+0xc0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <TIM_Base_SetConfig+0x98>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	615a      	str	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400

08002d04 <TIM_TI1_ConfigInputStage>:
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 030a 	bic.w	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <TIM_TI2_ConfigInputStage>:
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0210 	bic.w	r2, r3, #16
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	031b      	lsls	r3, r3, #12
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	619a      	str	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ITRx_SetConfig>:
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f043 0307 	orr.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <TIM_ETR_SetConfig>:
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	021a      	lsls	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_MasterConfigSynchronization>:
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e041      	b.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40000400 	.word	0x40000400

08002ee0 <HAL_TIMEx_CommutCallback>:
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIMEx_BreakCallback>:
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	2600      	movs	r6, #0
 8002f08:	4d0c      	ldr	r5, [pc, #48]	; (8002f3c <__libc_init_array+0x38>)
 8002f0a:	4c0d      	ldr	r4, [pc, #52]	; (8002f40 <__libc_init_array+0x3c>)
 8002f0c:	1b64      	subs	r4, r4, r5
 8002f0e:	10a4      	asrs	r4, r4, #2
 8002f10:	42a6      	cmp	r6, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	f000 f822 	bl	8002f5c <_init>
 8002f18:	2600      	movs	r6, #0
 8002f1a:	4d0a      	ldr	r5, [pc, #40]	; (8002f44 <__libc_init_array+0x40>)
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <__libc_init_array+0x44>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	42a6      	cmp	r6, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2c:	4798      	blx	r3
 8002f2e:	3601      	adds	r6, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f36:	4798      	blx	r3
 8002f38:	3601      	adds	r6, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	08002f98 	.word	0x08002f98
 8002f40:	08002f98 	.word	0x08002f98
 8002f44:	08002f98 	.word	0x08002f98
 8002f48:	08002f9c 	.word	0x08002f9c

08002f4c <memset>:
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4402      	add	r2, r0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d100      	bne.n	8002f56 <memset+0xa>
 8002f54:	4770      	bx	lr
 8002f56:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5a:	e7f9      	b.n	8002f50 <memset+0x4>

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
